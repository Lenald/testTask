Плюсы
 - использовал composer и готовый пакет для логов
 - обработка исключений
 - Скрипт работает так как был задуман разработчиком.
 - Минимально объектно ориентированный подход
 - Большенство возможных ошибок обработано (Правда реализация не соответствует задаче)
 
Минусы
 - задание неверно понято. Нужно "the highest average number of working hours reported on the corresponding weekday.", 
    речь идёт именно о среднем "average" количестве часов за каждый день (средний за все понедельники, средний за все вторники, и т.д.).
    Задача же выполнена как подсчёт за каждый день определённой недели.	Но и для текущего понимания задачи 
	- работает не всегда корректно, например неверный подсчёт произойдёт, если 
	в таблице time_reports будет более 1 записи на человека на определённую дату (нигде не говорилось, что она 100% одна).
	Ещё при таком понимании задачи необходимо выносить настройку за какую неделю считать (лучше всего в параметры запуска CLI)

 - проблемы нейминга, не стоит называть переменные $arr , лучше опираться не на тип данных, а на логику, например, $statistic или $reportsByDate

 -  'PDOException in DAOConnection::connect(): Failed to connect to DB'
    Не стоит использовать название методов и классов в строках, в таких случаях лучше использовать константы __CLASS__ __METHOD__
	
 - стоило бы запилить автозагрузчик классов, сейчас при добавлении нового придётся добавлять include к index.php
 
 - подключение к БД происходит более 1 раза без необходимости (ещё и намеренно убивается подключение после запроса), тут следует использовать синглтон.
   Выполняются запросы на каждый день, можно легко ограничиться одним запросом.
   Файл конфига БД должен быть отдельно от реализации подключения.
   Нет настройки порта подключения к БД
   Непонятно зачем использовался RIGHT JOIN  вместо INNER JOIN
   
 - частое использование конкатенации "." лучше sprintf() , значительно улучшает читабельность
 
 - ньюансы по форматированию кода согласно psr  - отступы, открывающая скобка функции на той-же строке, что и её название (следует подключить phpcs)
 
 - global $log; не стоит использовать глобальные переменные, в идеале - передавать зависимости в конструктор, можно использовать статические обращения к классам.
 
 -  функция \Domain\TimeReport::getReport выполняет слишком много разнородных действий ,
    она и проверяет наличие записей, и вызывает запрос данных, и генерирует строки, и выводит их на экран.
    Лучше было бы если, например она вызывала только генерацию данных, а потом передавала данные для генерации строк ответа,
	и cудя по её названию 'getReport' - только вернуть строки репорта в каком-либо виде, либо переименовать функцию и отдавать отвыт в Output
	(менее предпочительно, но тоже адекватно)
	
 	
	
